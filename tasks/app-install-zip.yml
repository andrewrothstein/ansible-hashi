---
- name: Resolving vars for {{ hashi_app.name }}:{{ hashi_app.ver }}{% if 'meta' in hashi_app %}+{{ hashi_app.meta }}{% endif %}
  ansible.builtin.include_vars:
    file: app-install-zip-vars.yml
- name: Looking for previous installation of {{ hashi_app_install_exe }}
  ansible.builtin.stat:
    path: '{{ hashi_app_install_exe }}'
  register: hashi_app_install_binary
- name: Downloading and installing
  when: not hashi_app_install_binary.stat.exists
  block:
    - name: Mkdir {{ hashi_app_install_dir }}
      become: '{{ hashi_elevate }}'
      become_user: root
      ansible.builtin.file:
        name: '{{ hashi_app_install_dir }}'
        state: directory
        mode: '755'
    - name: Downloading {{ hashi_app_install_url }} to {{ hashi_app_tmp_zip }}
      become: '{{ hashi_elevate }}'
      become_user: root
      ansible.builtin.get_url:
        url: '{{ hashi_app_install_url }}'
        dest: '{{ hashi_app_tmp_zip }}'
        mode: '644'
        checksum: 'sha256:{{ hashi_app_install_checksums_url }}'
    - name: Installing andrewrothstein.unarchivedeps
      ansible.builtin.include_role:
        name: andrewrothstein.unarchivedeps
    - name: Unzipping {{ hashi_app_tmp_zip }} to {{ hashi_app_install_dir }}
      become: '{{ hashi_elevate }}'
      become_user: root
      ansible.builtin.unarchive:
        remote_src: true
        src: '{{ hashi_app_tmp_zip }}'
        dest: '{{ hashi_app_install_dir }}'
        creates: '{{ hashi_app_install_exe }}'
  always:
    - name: Cleaning up {{ hashi_app_tmp_zip }}
      become: '{{ hashi_elevate }}'
      become_user: root
      ansible.builtin.file:
        path: '{{ hashi_app_tmp_zip }}'
        state: absent
- name: Linking executables for {{ hashi_app.name }}:{{ hashi_app_eff_ver }}
  become: '{{ hashi_elevate }}'
  become_user: root
  with_items: '{{ hashi_app_install_links }}'
  ansible.builtin.file:
    state: link
    src: '{{ hashi_app_install_exe }}'
    dest: '{{ item }}'
